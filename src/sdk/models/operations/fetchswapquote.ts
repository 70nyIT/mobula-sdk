/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

/**
 * Aggregation type (fast or best)
 */
export enum TypeT {
    Fast = "fast",
    Best = "best",
}

export class FetchSwapQuoteRequest extends SpeakeasyBase {
    /**
     * Amount (x decimals) for the swap in
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=amount" })
    amount: number;

    /**
     * Blockchain of the trade
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=chain" })
    chain: string;

    /**
     * Address that triggers the trade
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=fromAddress" })
    fromAddress: string;

    /**
     * Source token for the swap
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=fromToken" })
    fromToken: string;

    /**
     * Address that receives the trade (by default, the sender)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=receiver" })
    receiver?: string;

    /**
     * Slippage (%) accepted
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=slippage" })
    slippage: number;

    /**
     * Destination token for the swap
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=toToken" })
    toToken: string;

    /**
     * Aggregation type (fast or best)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=type" })
    type?: TypeT;
}

export class Tx extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    data?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "from" })
    from?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "to" })
    to?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "value" })
    value?: string;
}

export class Success extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "amountOut" })
    amountOut?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "error" })
    error?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "isAggregator" })
    isAggregator?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "protocol" })
    protocol?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "tx" })
    @Type(() => Tx)
    tx?: Tx;

    @SpeakeasyMetadata()
    @Expose({ name: "will_fail" })
    willFail?: boolean;
}

/**
 * Successful operation
 */
export class FetchSwapQuoteResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Success })
    @Expose({ name: "success" })
    @Type(() => Success)
    success?: Success[];
}

export class FetchSwapQuoteResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Successful operation
     */
    @SpeakeasyMetadata()
    object?: FetchSwapQuoteResponseBody;
}
