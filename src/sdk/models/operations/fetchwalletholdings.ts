/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { objectToClass, SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose, Transform, Type } from "class-transformer";

export class FetchWalletHoldingsRequest extends SpeakeasyBase {
    /**
     * Blockchains to fetch holdings from (by default, all) - comma separated, chain ID or chain name
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=blockchains" })
    blockchains?: string;

    /**
     * Will use cached data if available
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=cache" })
    cache?: boolean;

    /**
     * Amount of seconds after which the cache is considered stale (default 5min)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=stale" })
    stale?: number;

    /**
     * The user wallet queried
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=wallet" })
    wallet: string;
}

export class CrossChainBalances extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "address" })
    address?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "balance" })
    balance?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "balanceRaw" })
    balanceRaw?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "chainId" })
    chainId?: number;
}

export class Assets extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "asset" })
    @Type(() => shared.Asset)
    asset?: shared.Asset;

    @SpeakeasyMetadata({ elemType: CrossChainBalances })
    @Expose({ name: "cross_chain_balances" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, CrossChainBalances> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], CrossChainBalances);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    crossChainBalances?: Record<string, CrossChainBalances>;

    /**
     * Estimated balance of the asset in the wallet.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "estimated_balance" })
    estimatedBalance?: number;

    /**
     * Current price of the asset.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "price" })
    price?: number;

    /**
     * Token balance of the asset in the wallet.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "token_balance" })
    tokenBalance?: number;
}

export class FetchWalletHoldingsData extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: Assets })
    @Expose({ name: "assets" })
    @Type(() => Assets)
    assets?: Assets[];

    /**
     * Total balance of the wallet in USD.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "total_wallet_balance" })
    totalWalletBalance?: number;

    /**
     * Wallet address queried.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "wallet" })
    wallet?: string;
}

export class LastUpdated extends SpeakeasyBase {
    /**
     * Timestamp of the last internal transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "internal" })
    internal?: number;

    /**
     * Timestamp of the last update
     */
    @SpeakeasyMetadata()
    @Expose({ name: "last_updated" })
    lastUpdated?: number;

    /**
     * Timestamp of the last normal transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "normal" })
    normal?: number;

    /**
     * Timestamp of the last token transaction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "token" })
    token?: number;
}

/**
 * Successful response
 */
export class FetchWalletHoldingsResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    @Type(() => FetchWalletHoldingsData)
    data?: FetchWalletHoldingsData;

    @SpeakeasyMetadata({ elemType: LastUpdated })
    @Expose({ name: "lastUpdated" })
    @Transform(
        ({ value }) => {
            const obj: Record<string, LastUpdated> = {};
            for (const key in value) {
                obj[key] = objectToClass(value[key], LastUpdated);
            }
            return obj;
        },
        { toClassOnly: true }
    )
    lastUpdated?: Record<string, LastUpdated>;
}

export class FetchWalletHoldingsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * Successful response
     */
    @SpeakeasyMetadata()
    object?: FetchWalletHoldingsResponseBody;
}
