/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class FetchAssetMarketDataRequest extends SpeakeasyBase {
    /**
     * The asset you want to target - asset name only works for assets listed on Mobula.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=asset" })
    asset?: string;

    /**
     * Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=blockchain" })
    blockchain?: string;

    /**
     * Symbol of the asset - only mandatory if no asset name/contract is provided
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=symbol" })
    symbol?: string;
}

/**
 * OK
 */
export class FetchAssetMarketDataResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    data?: Record<string, any>;
}

export class FetchAssetMarketDataResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    object?: FetchAssetMarketDataResponseBody;
}
