/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FetchWalletNFTsRequest extends SpeakeasyBase {
    /**
     * Blockchains to fetch NFTs from (by default, all) - comma separated, chain ID or chain name
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=blockchains" })
    blockchains?: string;

    /**
     * Will force a new on-chain data fetch
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=force" })
    force?: boolean;

    /**
     * Wallet address or ENS or Mobula username
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=wallet" })
    wallet?: string;
}

export class FetchWalletNFTsData extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "amount" })
    amount?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "contract_type" })
    contractType?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "metadata" })
    metadata?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "symbol" })
    symbol?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "token_address" })
    tokenAddress?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "token_hash" })
    tokenHash?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "token_id" })
    tokenId?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "token_uri" })
    tokenUri?: string;
}

/**
 * A list of NFTs in the queried wallet
 */
export class FetchWalletNFTsResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata({ elemType: FetchWalletNFTsData })
    @Expose({ name: "data" })
    @Type(() => FetchWalletNFTsData)
    data?: FetchWalletNFTsData[];
}

export class FetchWalletNFTsResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * A list of NFTs in the queried wallet
     */
    @SpeakeasyMetadata()
    object?: FetchWalletNFTsResponseBody;
}
