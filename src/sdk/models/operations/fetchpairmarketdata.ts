/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";
import { Expose, Type } from "class-transformer";

export class FetchPairMarketDataRequest extends SpeakeasyBase {
    /**
     * The address of the smart-contract of the pair (or pool, or vault).
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=address" })
    address: string;

    /**
     * The name/address of the asset you want in return
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=asset" })
    asset?: any;

    /**
     * Blockchain of the pair (only mandatory for Balancer V2 pairs).
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=blockchain" })
    blockchain?: string;
}

/**
 * OK
 */
export class FetchPairMarketDataResponseBody extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "data" })
    @Type(() => shared.Pair)
    data?: shared.Pair;
}

export class FetchPairMarketDataResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    object?: FetchPairMarketDataResponseBody;
}
