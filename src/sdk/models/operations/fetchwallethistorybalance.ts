/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

export class FetchWalletHistoryBalanceRequest extends SpeakeasyBase {
    /**
     * Blockchains to fetch history from (by default, all) - comma separated, chain ID or chain name
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=blockchains" })
    blockchains?: string;

    /**
     * JS Timestamp (miliseconds) of the beginning of the timeframe (if not provided, genesis)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=from" })
    from?: number;

    /**
     * JS Timestamp (miliseconds) of the end of the timeframe (if not provided, end)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=to" })
    to?: number;

    /**
     * The user wallet queried
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=wallet" })
    wallet: string;
}

export class FetchWalletHistoryBalanceResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    walletHistoryResponse?: shared.WalletHistoryResponse;
}
