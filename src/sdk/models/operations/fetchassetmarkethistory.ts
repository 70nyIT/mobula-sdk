/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import * as shared from "../../../sdk/models/shared";
import { AxiosResponse } from "axios";

export class FetchAssetMarketHistoryRequest extends SpeakeasyBase {
    /**
     * The asset you want to target - asset name only works for assets listed on Mobula.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=asset" })
    asset: string;

    /**
     * Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=blockchain" })
    blockchain?: string;

    /**
     * JS Timestamp (milliseconds) of the beginning of the timeframe (if not provided, genesis)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=from" })
    from?: number;

    /**
     * JS Timestamp (milliseconds) of the end of the timeframe (if not provided, end)
     */
    @SpeakeasyMetadata({ data: "queryParam, style=form;explode=true;name=to" })
    to?: number;
}

export class FetchAssetMarketHistoryResponse extends SpeakeasyBase {
    /**
     * HTTP response content type for this operation
     */
    @SpeakeasyMetadata()
    contentType: string;

    /**
     * OK
     */
    @SpeakeasyMetadata()
    marketHistoryResponse?: shared.MarketHistoryResponse;

    /**
     * HTTP response status code for this operation
     */
    @SpeakeasyMetadata()
    statusCode: number;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @SpeakeasyMetadata()
    rawResponse: AxiosResponse;
}
