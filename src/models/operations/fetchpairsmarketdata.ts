/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type FetchPairsMarketDataRequest = {
    /**
     * The asset you want to target - asset name only works for assets listed on Mobula.
     */
    asset: string;
    /**
     * Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     */
    blockchain?: string | undefined;
    /**
     * The offset of the results
     */
    offset?: number | undefined;
};

export type FetchPairsMarketDataData = {
    pairs?: Array<components.MultiPair> | undefined;
};

/**
 * OK
 */
export type FetchPairsMarketDataResponseBody = {
    data?: FetchPairsMarketDataData | undefined;
};

export type FetchPairsMarketDataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: FetchPairsMarketDataResponseBody | undefined;
};

/** @internal */
export namespace FetchPairsMarketDataRequest$ {
    export type Inbound = {
        asset: string;
        blockchain?: string | undefined;
        offset?: number | undefined;
    };

    export const inboundSchema: z.ZodType<FetchPairsMarketDataRequest, z.ZodTypeDef, Inbound> = z
        .object({
            asset: z.string(),
            blockchain: z.string().optional(),
            offset: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                asset: v.asset,
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
            };
        });

    export type Outbound = {
        asset: string;
        blockchain?: string | undefined;
        offset?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchPairsMarketDataRequest> = z
        .object({
            asset: z.string(),
            blockchain: z.string().optional(),
            offset: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                asset: v.asset,
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
            };
        });
}

/** @internal */
export namespace FetchPairsMarketDataData$ {
    export type Inbound = {
        pairs?: Array<components.MultiPair$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<FetchPairsMarketDataData, z.ZodTypeDef, Inbound> = z
        .object({
            pairs: z.array(components.MultiPair$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.pairs === undefined ? null : { pairs: v.pairs }),
            };
        });

    export type Outbound = {
        pairs?: Array<components.MultiPair$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchPairsMarketDataData> = z
        .object({
            pairs: z.array(components.MultiPair$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.pairs === undefined ? null : { pairs: v.pairs }),
            };
        });
}

/** @internal */
export namespace FetchPairsMarketDataResponseBody$ {
    export type Inbound = {
        data?: FetchPairsMarketDataData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchPairsMarketDataResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z.lazy(() => FetchPairsMarketDataData$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                };
            });

    export type Outbound = {
        data?: FetchPairsMarketDataData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchPairsMarketDataResponseBody
    > = z
        .object({
            data: z.lazy(() => FetchPairsMarketDataData$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace FetchPairsMarketDataResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: FetchPairsMarketDataResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchPairsMarketDataResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => FetchPairsMarketDataResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: FetchPairsMarketDataResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchPairsMarketDataResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => FetchPairsMarketDataResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
