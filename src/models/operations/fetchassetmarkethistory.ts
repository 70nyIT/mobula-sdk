/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type FetchAssetMarketHistoryRequest = {
    /**
     * The asset you want to target - asset name only works for assets listed on Mobula.
     */
    asset: string;
    /**
     * Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     */
    blockchain?: string | undefined;
    /**
     * JS Timestamp (milliseconds) of the beginning of the timeframe (if not provided, genesis)
     */
    from?: number | undefined;
    /**
     * JS Timestamp (milliseconds) of the end of the timeframe (if not provided, end)
     */
    to?: number | undefined;
};

export type FetchAssetMarketHistoryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    marketHistoryResponse?: components.MarketHistoryResponse | undefined;
};

/** @internal */
export namespace FetchAssetMarketHistoryRequest$ {
    export type Inbound = {
        asset: string;
        blockchain?: string | undefined;
        from?: number | undefined;
        to?: number | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAssetMarketHistoryRequest, z.ZodTypeDef, Inbound> = z
        .object({
            asset: z.string(),
            blockchain: z.string().optional(),
            from: z.number().int().optional(),
            to: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                asset: v.asset,
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
            };
        });

    export type Outbound = {
        asset: string;
        blockchain?: string | undefined;
        from?: number | undefined;
        to?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchAssetMarketHistoryRequest> =
        z
            .object({
                asset: z.string(),
                blockchain: z.string().optional(),
                from: z.number().int().optional(),
                to: z.number().int().optional(),
            })
            .transform((v) => {
                return {
                    asset: v.asset,
                    ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                    ...(v.from === undefined ? null : { from: v.from }),
                    ...(v.to === undefined ? null : { to: v.to }),
                };
            });
}

/** @internal */
export namespace FetchAssetMarketHistoryResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        MarketHistoryResponse?: components.MarketHistoryResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAssetMarketHistoryResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                MarketHistoryResponse: components.MarketHistoryResponse$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.MarketHistoryResponse === undefined
                        ? null
                        : { marketHistoryResponse: v.MarketHistoryResponse }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        MarketHistoryResponse?: components.MarketHistoryResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchAssetMarketHistoryResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            marketHistoryResponse: components.MarketHistoryResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.marketHistoryResponse === undefined
                    ? null
                    : { MarketHistoryResponse: v.marketHistoryResponse }),
            };
        });
}
