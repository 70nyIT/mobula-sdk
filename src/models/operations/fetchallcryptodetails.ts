/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type FetchAllCryptoDetailsRequest = {
    /**
     * Extra fields needed
     */
    fields?: string | undefined;
};

/**
 * OK
 */
export type FetchAllCryptoDetailsResponseBody = {
    data?: Array<components.CryptoData> | undefined;
};

export type FetchAllCryptoDetailsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: FetchAllCryptoDetailsResponseBody | undefined;
};

/** @internal */
export namespace FetchAllCryptoDetailsRequest$ {
    export type Inbound = {
        fields?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAllCryptoDetailsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            fields: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
            };
        });

    export type Outbound = {
        fields?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchAllCryptoDetailsRequest> = z
        .object({
            fields: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.fields === undefined ? null : { fields: v.fields }),
            };
        });
}

/** @internal */
export namespace FetchAllCryptoDetailsResponseBody$ {
    export type Inbound = {
        data?: Array<components.CryptoData$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<
        FetchAllCryptoDetailsResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.array(components.CryptoData$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Array<components.CryptoData$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchAllCryptoDetailsResponseBody
    > = z
        .object({
            data: z.array(components.CryptoData$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace FetchAllCryptoDetailsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: FetchAllCryptoDetailsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAllCryptoDetailsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => FetchAllCryptoDetailsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: FetchAllCryptoDetailsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchAllCryptoDetailsResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                object: z.lazy(() => FetchAllCryptoDetailsResponseBody$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });
}
