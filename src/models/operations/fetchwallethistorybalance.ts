/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type FetchWalletHistoryBalanceRequest = {
    /**
     * The user wallet queried
     */
    wallet: string;
    /**
     * JS Timestamp (miliseconds) of the beginning of the timeframe (if not provided, genesis)
     */
    from?: number | undefined;
    /**
     * JS Timestamp (miliseconds) of the end of the timeframe (if not provided, end)
     */
    to?: number | undefined;
    /**
     * Blockchains to fetch history from (by default, all) - comma separated, chain ID or chain name
     */
    blockchains?: string | undefined;
};

export type FetchWalletHistoryBalanceResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    walletHistoryResponse?: components.WalletHistoryResponse | undefined;
};

/** @internal */
export namespace FetchWalletHistoryBalanceRequest$ {
    export type Inbound = {
        wallet: string;
        from?: number | undefined;
        to?: number | undefined;
        blockchains?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FetchWalletHistoryBalanceRequest, z.ZodTypeDef, Inbound> =
        z
            .object({
                wallet: z.string(),
                from: z.number().int().optional(),
                to: z.number().int().optional(),
                blockchains: z.string().optional(),
            })
            .transform((v) => {
                return {
                    wallet: v.wallet,
                    ...(v.from === undefined ? null : { from: v.from }),
                    ...(v.to === undefined ? null : { to: v.to }),
                    ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
                };
            });

    export type Outbound = {
        wallet: string;
        from?: number | undefined;
        to?: number | undefined;
        blockchains?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchWalletHistoryBalanceRequest
    > = z
        .object({
            wallet: z.string(),
            from: z.number().int().optional(),
            to: z.number().int().optional(),
            blockchains: z.string().optional(),
        })
        .transform((v) => {
            return {
                wallet: v.wallet,
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
            };
        });
}

/** @internal */
export namespace FetchWalletHistoryBalanceResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        WalletHistoryResponse?: components.WalletHistoryResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        FetchWalletHistoryBalanceResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            WalletHistoryResponse: components.WalletHistoryResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.WalletHistoryResponse === undefined
                    ? null
                    : { walletHistoryResponse: v.WalletHistoryResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        WalletHistoryResponse?: components.WalletHistoryResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchWalletHistoryBalanceResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            walletHistoryResponse: components.WalletHistoryResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.walletHistoryResponse === undefined
                    ? null
                    : { WalletHistoryResponse: v.walletHistoryResponse }),
            };
        });
}
