/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type FetchAssetTradeHistoryRequest = {
    /**
     * Asset name or contract address to retrieve trade history for.
     */
    asset: string;
    /**
     * Maximum number of results to return.
     */
    maxResults?: number | undefined;
};

export type FetchAssetTradeHistoryResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    tradeHistoryResponse?: components.TradeHistoryResponse | undefined;
};

/** @internal */
export namespace FetchAssetTradeHistoryRequest$ {
    export type Inbound = {
        asset: string;
        maxResults?: number | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAssetTradeHistoryRequest, z.ZodTypeDef, Inbound> = z
        .object({
            asset: z.string(),
            maxResults: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                asset: v.asset,
                ...(v.maxResults === undefined ? null : { maxResults: v.maxResults }),
            };
        });

    export type Outbound = {
        asset: string;
        maxResults?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchAssetTradeHistoryRequest> =
        z
            .object({
                asset: z.string(),
                maxResults: z.number().int().optional(),
            })
            .transform((v) => {
                return {
                    asset: v.asset,
                    ...(v.maxResults === undefined ? null : { maxResults: v.maxResults }),
                };
            });
}

/** @internal */
export namespace FetchAssetTradeHistoryResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        TradeHistoryResponse?: components.TradeHistoryResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAssetTradeHistoryResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            TradeHistoryResponse: components.TradeHistoryResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.TradeHistoryResponse === undefined
                    ? null
                    : { tradeHistoryResponse: v.TradeHistoryResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        TradeHistoryResponse?: components.TradeHistoryResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchAssetTradeHistoryResponse> =
        z
            .object({
                contentType: z.string(),
                statusCode: z.number().int(),
                rawResponse: z.instanceof(Response).transform(() => {
                    throw new Error("Response cannot be serialized");
                }),
                tradeHistoryResponse: components.TradeHistoryResponse$.outboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ContentType: v.contentType,
                    StatusCode: v.statusCode,
                    RawResponse: v.rawResponse,
                    ...(v.tradeHistoryResponse === undefined
                        ? null
                        : { TradeHistoryResponse: v.tradeHistoryResponse }),
                };
            });
}
