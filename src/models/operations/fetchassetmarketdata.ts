/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type FetchAssetMarketDataRequest = {
    /**
     * The asset you want to target - asset name only works for assets listed on Mobula.
     */
    asset?: string | undefined;
    /**
     * Blockchain of the asset - only mandatory if asset is sent as smart-contract.
     */
    blockchain?: string | undefined;
    /**
     * Symbol of the asset - only mandatory if no asset name/contract is provided
     */
    symbol?: string | undefined;
};

/**
 * OK
 */
export type FetchAssetMarketDataResponseBody = {
    data?: Record<string, any> | undefined;
};

export type FetchAssetMarketDataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: FetchAssetMarketDataResponseBody | undefined;
};

/** @internal */
export namespace FetchAssetMarketDataRequest$ {
    export type Inbound = {
        asset?: string | undefined;
        blockchain?: string | undefined;
        symbol?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAssetMarketDataRequest, z.ZodTypeDef, Inbound> = z
        .object({
            asset: z.string().optional(),
            blockchain: z.string().optional(),
            symbol: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
            };
        });

    export type Outbound = {
        asset?: string | undefined;
        blockchain?: string | undefined;
        symbol?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchAssetMarketDataRequest> = z
        .object({
            asset: z.string().optional(),
            blockchain: z.string().optional(),
            symbol: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
            };
        });
}

/** @internal */
export namespace FetchAssetMarketDataResponseBody$ {
    export type Inbound = {
        data?: Record<string, any> | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAssetMarketDataResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: z.record(z.any()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                };
            });

    export type Outbound = {
        data?: Record<string, any> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchAssetMarketDataResponseBody
    > = z
        .object({
            data: z.record(z.any()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace FetchAssetMarketDataResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: FetchAssetMarketDataResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchAssetMarketDataResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => FetchAssetMarketDataResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: FetchAssetMarketDataResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchAssetMarketDataResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => FetchAssetMarketDataResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
