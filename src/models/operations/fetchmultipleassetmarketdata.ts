/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type FetchMultipleAssetMarketDataRequest = {
    /**
     * Comma separated list of asset names or Ethereum addresses (max 500)
     */
    assets?: string | undefined;
    /**
     * Comma separated list of blockchain names
     */
    blockchains?: string | undefined;
    /**
     * Comma separated list of symbols
     */
    symbols?: string | undefined;
};

export type FetchMultipleAssetMarketDataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response with market data.
     */
    multiDataResponse?: components.MultiDataResponse | undefined;
};

/** @internal */
export namespace FetchMultipleAssetMarketDataRequest$ {
    export type Inbound = {
        assets?: string | undefined;
        blockchains?: string | undefined;
        symbols?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        FetchMultipleAssetMarketDataRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            assets: z.string().optional(),
            blockchains: z.string().optional(),
            symbols: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.assets === undefined ? null : { assets: v.assets }),
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
                ...(v.symbols === undefined ? null : { symbols: v.symbols }),
            };
        });

    export type Outbound = {
        assets?: string | undefined;
        blockchains?: string | undefined;
        symbols?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchMultipleAssetMarketDataRequest
    > = z
        .object({
            assets: z.string().optional(),
            blockchains: z.string().optional(),
            symbols: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.assets === undefined ? null : { assets: v.assets }),
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
                ...(v.symbols === undefined ? null : { symbols: v.symbols }),
            };
        });
}

/** @internal */
export namespace FetchMultipleAssetMarketDataResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        MultiDataResponse?: components.MultiDataResponse$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        FetchMultipleAssetMarketDataResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            MultiDataResponse: components.MultiDataResponse$.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.MultiDataResponse === undefined
                    ? null
                    : { multiDataResponse: v.MultiDataResponse }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        MultiDataResponse?: components.MultiDataResponse$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchMultipleAssetMarketDataResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            multiDataResponse: components.MultiDataResponse$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.multiDataResponse === undefined
                    ? null
                    : { MultiDataResponse: v.multiDataResponse }),
            };
        });
}
