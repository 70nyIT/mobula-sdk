/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Aggregation type (fast or best)
 */
export enum TypeT {
    Fast = "fast",
    Best = "best",
}

export type FetchSwapQuoteRequest = {
    /**
     * Blockchain of the trade
     */
    chain: string;
    /**
     * Address that receives the trade (by default, the sender)
     */
    receiver?: string | undefined;
    /**
     * Source token for the swap
     */
    fromToken: string;
    /**
     * Destination token for the swap
     */
    toToken: string;
    /**
     * Address that triggers the trade
     */
    fromAddress: string;
    /**
     * Amount (x decimals) for the swap in
     */
    amount: number;
    /**
     * Slippage (%) accepted
     */
    slippage: number;
    /**
     * Aggregation type (fast or best)
     */
    type?: TypeT | undefined;
};

export type Tx = {
    data?: string | undefined;
    from?: string | undefined;
    to?: string | undefined;
    value?: string | undefined;
};

export type Success = {
    amountOut?: string | undefined;
    error?: string | undefined;
    isAggregator?: boolean | undefined;
    protocol?: string | undefined;
    tx?: Tx | undefined;
    willFail?: boolean | undefined;
};

/**
 * Successful operation
 */
export type FetchSwapQuoteResponseBody = {
    success?: Array<Success> | undefined;
};

export type FetchSwapQuoteResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful operation
     */
    object?: FetchSwapQuoteResponseBody | undefined;
};

/** @internal */
export const TypeT$ = z.nativeEnum(TypeT);

/** @internal */
export namespace FetchSwapQuoteRequest$ {
    export type Inbound = {
        chain: string;
        receiver?: string | undefined;
        fromToken: string;
        toToken: string;
        fromAddress: string;
        amount: number;
        slippage: number;
        type?: TypeT | undefined;
    };

    export const inboundSchema: z.ZodType<FetchSwapQuoteRequest, z.ZodTypeDef, Inbound> = z
        .object({
            chain: z.string(),
            receiver: z.string().optional(),
            fromToken: z.string(),
            toToken: z.string(),
            fromAddress: z.string(),
            amount: z.number().int(),
            slippage: z.number(),
            type: TypeT$.optional(),
        })
        .transform((v) => {
            return {
                chain: v.chain,
                ...(v.receiver === undefined ? null : { receiver: v.receiver }),
                fromToken: v.fromToken,
                toToken: v.toToken,
                fromAddress: v.fromAddress,
                amount: v.amount,
                slippage: v.slippage,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        chain: string;
        receiver?: string | undefined;
        fromToken: string;
        toToken: string;
        fromAddress: string;
        amount: number;
        slippage: number;
        type?: TypeT | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchSwapQuoteRequest> = z
        .object({
            chain: z.string(),
            receiver: z.string().optional(),
            fromToken: z.string(),
            toToken: z.string(),
            fromAddress: z.string(),
            amount: z.number().int(),
            slippage: z.number(),
            type: TypeT$.optional(),
        })
        .transform((v) => {
            return {
                chain: v.chain,
                ...(v.receiver === undefined ? null : { receiver: v.receiver }),
                fromToken: v.fromToken,
                toToken: v.toToken,
                fromAddress: v.fromAddress,
                amount: v.amount,
                slippage: v.slippage,
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace Tx$ {
    export type Inbound = {
        data?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Tx, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.string().optional(),
            from: z.string().optional(),
            to: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        data?: string | undefined;
        from?: string | undefined;
        to?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Tx> = z
        .object({
            data: z.string().optional(),
            from: z.string().optional(),
            to: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}

/** @internal */
export namespace Success$ {
    export type Inbound = {
        amountOut?: string | undefined;
        error?: string | undefined;
        isAggregator?: boolean | undefined;
        protocol?: string | undefined;
        tx?: Tx$.Inbound | undefined;
        will_fail?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Success, z.ZodTypeDef, Inbound> = z
        .object({
            amountOut: z.string().optional(),
            error: z.string().optional(),
            isAggregator: z.boolean().optional(),
            protocol: z.string().optional(),
            tx: z.lazy(() => Tx$.inboundSchema).optional(),
            will_fail: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amountOut === undefined ? null : { amountOut: v.amountOut }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.isAggregator === undefined ? null : { isAggregator: v.isAggregator }),
                ...(v.protocol === undefined ? null : { protocol: v.protocol }),
                ...(v.tx === undefined ? null : { tx: v.tx }),
                ...(v.will_fail === undefined ? null : { willFail: v.will_fail }),
            };
        });

    export type Outbound = {
        amountOut?: string | undefined;
        error?: string | undefined;
        isAggregator?: boolean | undefined;
        protocol?: string | undefined;
        tx?: Tx$.Outbound | undefined;
        will_fail?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Success> = z
        .object({
            amountOut: z.string().optional(),
            error: z.string().optional(),
            isAggregator: z.boolean().optional(),
            protocol: z.string().optional(),
            tx: z.lazy(() => Tx$.outboundSchema).optional(),
            willFail: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.amountOut === undefined ? null : { amountOut: v.amountOut }),
                ...(v.error === undefined ? null : { error: v.error }),
                ...(v.isAggregator === undefined ? null : { isAggregator: v.isAggregator }),
                ...(v.protocol === undefined ? null : { protocol: v.protocol }),
                ...(v.tx === undefined ? null : { tx: v.tx }),
                ...(v.willFail === undefined ? null : { will_fail: v.willFail }),
            };
        });
}

/** @internal */
export namespace FetchSwapQuoteResponseBody$ {
    export type Inbound = {
        success?: Array<Success$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<FetchSwapQuoteResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            success: z.array(z.lazy(() => Success$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.success === undefined ? null : { success: v.success }),
            };
        });

    export type Outbound = {
        success?: Array<Success$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchSwapQuoteResponseBody> = z
        .object({
            success: z.array(z.lazy(() => Success$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.success === undefined ? null : { success: v.success }),
            };
        });
}

/** @internal */
export namespace FetchSwapQuoteResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: FetchSwapQuoteResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchSwapQuoteResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => FetchSwapQuoteResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: FetchSwapQuoteResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchSwapQuoteResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => FetchSwapQuoteResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
