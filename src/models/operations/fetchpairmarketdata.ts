/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type FetchPairMarketDataRequest = {
    /**
     * The address of the smart-contract of the pair (or pool, or vault).
     */
    address: string;
    /**
     * Blockchain of the pair (only mandatory for Balancer V2 pairs).
     */
    blockchain?: string | undefined;
    /**
     * The name/address of the asset you want in return
     */
    asset?: any | undefined;
};

/**
 * OK
 */
export type FetchPairMarketDataResponseBody = {
    data?: components.Pair | undefined;
};

export type FetchPairMarketDataResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * OK
     */
    object?: FetchPairMarketDataResponseBody | undefined;
};

/** @internal */
export namespace FetchPairMarketDataRequest$ {
    export type Inbound = {
        address: string;
        blockchain?: string | undefined;
        asset?: any | undefined;
    };

    export const inboundSchema: z.ZodType<FetchPairMarketDataRequest, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string(),
            blockchain: z.string().optional(),
            asset: z.any().optional(),
        })
        .transform((v) => {
            return {
                address: v.address,
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
            };
        });

    export type Outbound = {
        address: string;
        blockchain?: string | undefined;
        asset?: any | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchPairMarketDataRequest> = z
        .object({
            address: z.string(),
            blockchain: z.string().optional(),
            asset: z.any().optional(),
        })
        .transform((v) => {
            return {
                address: v.address,
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
            };
        });
}

/** @internal */
export namespace FetchPairMarketDataResponseBody$ {
    export type Inbound = {
        data?: components.Pair$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchPairMarketDataResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                data: components.Pair$.inboundSchema.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.data === undefined ? null : { data: v.data }),
                };
            });

    export type Outbound = {
        data?: components.Pair$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchPairMarketDataResponseBody
    > = z
        .object({
            data: components.Pair$.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace FetchPairMarketDataResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: FetchPairMarketDataResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchPairMarketDataResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => FetchPairMarketDataResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: FetchPairMarketDataResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchPairMarketDataResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => FetchPairMarketDataResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
