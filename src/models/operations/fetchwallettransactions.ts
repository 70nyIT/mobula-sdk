/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export enum Order {
    Asc = "asc",
    Desc = "desc",
}

export type FetchWalletTransactionsRequest = {
    /**
     * The user wallet queried
     */
    wallet: string;
    /**
     * Start of the timeframe for transactions (timestamp)
     */
    from?: number | undefined;
    /**
     * End of the timeframe for transactions (timestamp)
     */
    to?: number | undefined;
    /**
     * Specific asset to filter transactions
     */
    asset?: string | undefined;
    /**
     * Blockchains to fetch NFTs from (by default, all) - comma separated, chain ID or chain name
     */
    blockchains?: string | undefined;
    /**
     * Number of transactions to return per page
     */
    limit?: number | undefined;
    /**
     * Number of transactions to skip
     */
    offset?: number | undefined;
    order?: Order | undefined;
};

export type FetchWalletTransactionsLastUpdated = {
    /**
     * Timestamp of the last normal transaction.
     */
    normal?: number | undefined;
    /**
     * Timestamp of the last internal transaction.
     */
    internal?: number | undefined;
    /**
     * Timestamp of the last token transaction.
     */
    token?: number | undefined;
    /**
     * Timestamp of the last update.
     */
    lastUpdated?: number | undefined;
};

export type FetchWalletTransactionsData = {
    transactions?: Array<components.Transaction> | undefined;
    /**
     * Total number of transactions.
     */
    total?: number | undefined;
    /**
     * Offset value for pagination.
     */
    offset?: number | undefined;
    /**
     * Limit value for pagination.
     */
    limit?: number | undefined;
    /**
     * Current page number.
     */
    page?: number | undefined;
    lastUpdated?: Record<string, FetchWalletTransactionsLastUpdated> | undefined;
};

/**
 * Successful response
 */
export type FetchWalletTransactionsResponseBody = {
    data?: FetchWalletTransactionsData | undefined;
};

export type FetchWalletTransactionsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: FetchWalletTransactionsResponseBody | undefined;
};

/** @internal */
export const Order$ = z.nativeEnum(Order);

/** @internal */
export namespace FetchWalletTransactionsRequest$ {
    export type Inbound = {
        wallet: string;
        from?: number | undefined;
        to?: number | undefined;
        asset?: string | undefined;
        blockchains?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        order?: Order | undefined;
    };

    export const inboundSchema: z.ZodType<FetchWalletTransactionsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            wallet: z.string(),
            from: z.number().int().optional(),
            to: z.number().int().optional(),
            asset: z.string().optional(),
            blockchains: z.string().optional(),
            limit: z.number().int().optional(),
            offset: z.number().int().optional(),
            order: Order$.optional(),
        })
        .transform((v) => {
            return {
                wallet: v.wallet,
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.order === undefined ? null : { order: v.order }),
            };
        });

    export type Outbound = {
        wallet: string;
        from?: number | undefined;
        to?: number | undefined;
        asset?: string | undefined;
        blockchains?: string | undefined;
        limit?: number | undefined;
        offset?: number | undefined;
        order?: Order | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchWalletTransactionsRequest> =
        z
            .object({
                wallet: z.string(),
                from: z.number().int().optional(),
                to: z.number().int().optional(),
                asset: z.string().optional(),
                blockchains: z.string().optional(),
                limit: z.number().int().optional(),
                offset: z.number().int().optional(),
                order: Order$.optional(),
            })
            .transform((v) => {
                return {
                    wallet: v.wallet,
                    ...(v.from === undefined ? null : { from: v.from }),
                    ...(v.to === undefined ? null : { to: v.to }),
                    ...(v.asset === undefined ? null : { asset: v.asset }),
                    ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
                    ...(v.limit === undefined ? null : { limit: v.limit }),
                    ...(v.offset === undefined ? null : { offset: v.offset }),
                    ...(v.order === undefined ? null : { order: v.order }),
                };
            });
}

/** @internal */
export namespace FetchWalletTransactionsLastUpdated$ {
    export type Inbound = {
        normal?: number | undefined;
        internal?: number | undefined;
        token?: number | undefined;
        last_updated?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        FetchWalletTransactionsLastUpdated,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            normal: z.number().int().optional(),
            internal: z.number().int().optional(),
            token: z.number().int().optional(),
            last_updated: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.normal === undefined ? null : { normal: v.normal }),
                ...(v.internal === undefined ? null : { internal: v.internal }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.last_updated === undefined ? null : { lastUpdated: v.last_updated }),
            };
        });

    export type Outbound = {
        normal?: number | undefined;
        internal?: number | undefined;
        token?: number | undefined;
        last_updated?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchWalletTransactionsLastUpdated
    > = z
        .object({
            normal: z.number().int().optional(),
            internal: z.number().int().optional(),
            token: z.number().int().optional(),
            lastUpdated: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.normal === undefined ? null : { normal: v.normal }),
                ...(v.internal === undefined ? null : { internal: v.internal }),
                ...(v.token === undefined ? null : { token: v.token }),
                ...(v.lastUpdated === undefined ? null : { last_updated: v.lastUpdated }),
            };
        });
}

/** @internal */
export namespace FetchWalletTransactionsData$ {
    export type Inbound = {
        transactions?: Array<components.Transaction$.Inbound> | undefined;
        total?: number | undefined;
        offset?: number | undefined;
        limit?: number | undefined;
        page?: number | undefined;
        lastUpdated?: Record<string, FetchWalletTransactionsLastUpdated$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<FetchWalletTransactionsData, z.ZodTypeDef, Inbound> = z
        .object({
            transactions: z.array(components.Transaction$.inboundSchema).optional(),
            total: z.number().int().optional(),
            offset: z.number().int().optional(),
            limit: z.number().int().optional(),
            page: z.number().optional(),
            lastUpdated: z
                .record(z.lazy(() => FetchWalletTransactionsLastUpdated$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.transactions === undefined ? null : { transactions: v.transactions }),
                ...(v.total === undefined ? null : { total: v.total }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.page === undefined ? null : { page: v.page }),
                ...(v.lastUpdated === undefined ? null : { lastUpdated: v.lastUpdated }),
            };
        });

    export type Outbound = {
        transactions?: Array<components.Transaction$.Outbound> | undefined;
        total?: number | undefined;
        offset?: number | undefined;
        limit?: number | undefined;
        page?: number | undefined;
        lastUpdated?: Record<string, FetchWalletTransactionsLastUpdated$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchWalletTransactionsData> = z
        .object({
            transactions: z.array(components.Transaction$.outboundSchema).optional(),
            total: z.number().int().optional(),
            offset: z.number().int().optional(),
            limit: z.number().int().optional(),
            page: z.number().optional(),
            lastUpdated: z
                .record(z.lazy(() => FetchWalletTransactionsLastUpdated$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.transactions === undefined ? null : { transactions: v.transactions }),
                ...(v.total === undefined ? null : { total: v.total }),
                ...(v.offset === undefined ? null : { offset: v.offset }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
                ...(v.page === undefined ? null : { page: v.page }),
                ...(v.lastUpdated === undefined ? null : { lastUpdated: v.lastUpdated }),
            };
        });
}

/** @internal */
export namespace FetchWalletTransactionsResponseBody$ {
    export type Inbound = {
        data?: FetchWalletTransactionsData$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        FetchWalletTransactionsResponseBody,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            data: z.lazy(() => FetchWalletTransactionsData$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: FetchWalletTransactionsData$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchWalletTransactionsResponseBody
    > = z
        .object({
            data: z.lazy(() => FetchWalletTransactionsData$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace FetchWalletTransactionsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: FetchWalletTransactionsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchWalletTransactionsResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
                object: z.lazy(() => FetchWalletTransactionsResponseBody$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    contentType: v.ContentType,
                    statusCode: v.StatusCode,
                    rawResponse: v.RawResponse,
                    ...(v.object === undefined ? null : { object: v.object }),
                };
            });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: FetchWalletTransactionsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        FetchWalletTransactionsResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => FetchWalletTransactionsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
