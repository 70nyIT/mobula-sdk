/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type FetchWalletNFTsRequest = {
    /**
     * Wallet address or ENS or Mobula username
     */
    wallet?: string | undefined;
    /**
     * Will force a new on-chain data fetch
     */
    force?: boolean | undefined;
    /**
     * Blockchains to fetch NFTs from (by default, all) - comma separated, chain ID or chain name
     */
    blockchains?: string | undefined;
};

export type Data = {
    tokenAddress?: string | undefined;
    tokenId?: string | undefined;
    amount?: string | undefined;
    tokenHash?: string | undefined;
    contractType?: string | undefined;
    name?: string | undefined;
    symbol?: string | null | undefined;
    tokenUri?: string | undefined;
    metadata?: string | null | undefined;
};

/**
 * A list of NFTs in the queried wallet
 */
export type FetchWalletNFTsResponseBody = {
    data?: Array<Data> | undefined;
};

export type FetchWalletNFTsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * A list of NFTs in the queried wallet
     */
    object?: FetchWalletNFTsResponseBody | undefined;
};

/** @internal */
export namespace FetchWalletNFTsRequest$ {
    export type Inbound = {
        wallet?: string | undefined;
        force?: boolean | undefined;
        blockchains?: string | undefined;
    };

    export const inboundSchema: z.ZodType<FetchWalletNFTsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            wallet: z.string().optional(),
            force: z.boolean().optional(),
            blockchains: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.wallet === undefined ? null : { wallet: v.wallet }),
                ...(v.force === undefined ? null : { force: v.force }),
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
            };
        });

    export type Outbound = {
        wallet?: string | undefined;
        force?: boolean | undefined;
        blockchains?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchWalletNFTsRequest> = z
        .object({
            wallet: z.string().optional(),
            force: z.boolean().optional(),
            blockchains: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.wallet === undefined ? null : { wallet: v.wallet }),
                ...(v.force === undefined ? null : { force: v.force }),
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
            };
        });
}

/** @internal */
export namespace Data$ {
    export type Inbound = {
        token_address?: string | undefined;
        token_id?: string | undefined;
        amount?: string | undefined;
        token_hash?: string | undefined;
        contract_type?: string | undefined;
        name?: string | undefined;
        symbol?: string | null | undefined;
        token_uri?: string | undefined;
        metadata?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<Data, z.ZodTypeDef, Inbound> = z
        .object({
            token_address: z.string().optional(),
            token_id: z.string().optional(),
            amount: z.string().optional(),
            token_hash: z.string().optional(),
            contract_type: z.string().optional(),
            name: z.string().optional(),
            symbol: z.string().nullable().optional(),
            token_uri: z.string().optional(),
            metadata: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.token_address === undefined ? null : { tokenAddress: v.token_address }),
                ...(v.token_id === undefined ? null : { tokenId: v.token_id }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.token_hash === undefined ? null : { tokenHash: v.token_hash }),
                ...(v.contract_type === undefined ? null : { contractType: v.contract_type }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
                ...(v.token_uri === undefined ? null : { tokenUri: v.token_uri }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        token_address?: string | undefined;
        token_id?: string | undefined;
        amount?: string | undefined;
        token_hash?: string | undefined;
        contract_type?: string | undefined;
        name?: string | undefined;
        symbol?: string | null | undefined;
        token_uri?: string | undefined;
        metadata?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Data> = z
        .object({
            tokenAddress: z.string().optional(),
            tokenId: z.string().optional(),
            amount: z.string().optional(),
            tokenHash: z.string().optional(),
            contractType: z.string().optional(),
            name: z.string().optional(),
            symbol: z.string().nullable().optional(),
            tokenUri: z.string().optional(),
            metadata: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.tokenAddress === undefined ? null : { token_address: v.tokenAddress }),
                ...(v.tokenId === undefined ? null : { token_id: v.tokenId }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.tokenHash === undefined ? null : { token_hash: v.tokenHash }),
                ...(v.contractType === undefined ? null : { contract_type: v.contractType }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
                ...(v.tokenUri === undefined ? null : { token_uri: v.tokenUri }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace FetchWalletNFTsResponseBody$ {
    export type Inbound = {
        data?: Array<Data$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<FetchWalletNFTsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(z.lazy(() => Data$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Array<Data$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchWalletNFTsResponseBody> = z
        .object({
            data: z.array(z.lazy(() => Data$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}

/** @internal */
export namespace FetchWalletNFTsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: FetchWalletNFTsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<FetchWalletNFTsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => FetchWalletNFTsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: FetchWalletNFTsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, FetchWalletNFTsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => FetchWalletNFTsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
