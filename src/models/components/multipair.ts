/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type MultiPairToken0 = {
    address?: string | undefined;
    decimals?: number | undefined;
    symbol?: string | undefined;
    name?: string | undefined;
    logo?: string | undefined;
    price?: number | undefined;
    priceToken?: number | null | undefined;
    id?: number | undefined;
};

export type MultiPairToken1 = {
    address?: string | undefined;
    decimals?: number | undefined;
    symbol?: string | undefined;
    name?: string | undefined;
    logo?: string | undefined;
    price?: number | undefined;
    priceToken?: number | null | undefined;
    id?: number | undefined;
};

export type MultiPair = {
    address?: string | undefined;
    token0?: MultiPairToken0 | undefined;
    token1?: MultiPairToken1 | undefined;
    liquidity?: number | undefined;
    volume?: number | undefined;
    price?: number | undefined;
    protocol?: string | undefined;
    blockchain?: string | undefined;
    exchange?: string | null | undefined;
    factory?: string | null | undefined;
};

/** @internal */
export namespace MultiPairToken0$ {
    export type Inbound = {
        address?: string | undefined;
        decimals?: number | undefined;
        symbol?: string | undefined;
        name?: string | undefined;
        logo?: string | undefined;
        price?: number | undefined;
        priceToken?: number | null | undefined;
        id?: number | undefined;
    };

    export const inboundSchema: z.ZodType<MultiPairToken0, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string().optional(),
            decimals: z.number().int().optional(),
            symbol: z.string().optional(),
            name: z.string().optional(),
            logo: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().nullable().optional(),
            id: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.decimals === undefined ? null : { decimals: v.decimals }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        address?: string | undefined;
        decimals?: number | undefined;
        symbol?: string | undefined;
        name?: string | undefined;
        logo?: string | undefined;
        price?: number | undefined;
        priceToken?: number | null | undefined;
        id?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MultiPairToken0> = z
        .object({
            address: z.string().optional(),
            decimals: z.number().int().optional(),
            symbol: z.string().optional(),
            name: z.string().optional(),
            logo: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().nullable().optional(),
            id: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.decimals === undefined ? null : { decimals: v.decimals }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace MultiPairToken1$ {
    export type Inbound = {
        address?: string | undefined;
        decimals?: number | undefined;
        symbol?: string | undefined;
        name?: string | undefined;
        logo?: string | undefined;
        price?: number | undefined;
        priceToken?: number | null | undefined;
        id?: number | undefined;
    };

    export const inboundSchema: z.ZodType<MultiPairToken1, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string().optional(),
            decimals: z.number().int().optional(),
            symbol: z.string().optional(),
            name: z.string().optional(),
            logo: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().nullable().optional(),
            id: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.decimals === undefined ? null : { decimals: v.decimals }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });

    export type Outbound = {
        address?: string | undefined;
        decimals?: number | undefined;
        symbol?: string | undefined;
        name?: string | undefined;
        logo?: string | undefined;
        price?: number | undefined;
        priceToken?: number | null | undefined;
        id?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MultiPairToken1> = z
        .object({
            address: z.string().optional(),
            decimals: z.number().int().optional(),
            symbol: z.string().optional(),
            name: z.string().optional(),
            logo: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().nullable().optional(),
            id: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.decimals === undefined ? null : { decimals: v.decimals }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
                ...(v.id === undefined ? null : { id: v.id }),
            };
        });
}

/** @internal */
export namespace MultiPair$ {
    export type Inbound = {
        address?: string | undefined;
        token0?: MultiPairToken0$.Inbound | undefined;
        token1?: MultiPairToken1$.Inbound | undefined;
        liquidity?: number | undefined;
        volume?: number | undefined;
        price?: number | undefined;
        protocol?: string | undefined;
        blockchain?: string | undefined;
        exchange?: string | null | undefined;
        factory?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<MultiPair, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string().optional(),
            token0: z.lazy(() => MultiPairToken0$.inboundSchema).optional(),
            token1: z.lazy(() => MultiPairToken1$.inboundSchema).optional(),
            liquidity: z.number().optional(),
            volume: z.number().optional(),
            price: z.number().optional(),
            protocol: z.string().optional(),
            blockchain: z.string().optional(),
            exchange: z.string().nullable().optional(),
            factory: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.token0 === undefined ? null : { token0: v.token0 }),
                ...(v.token1 === undefined ? null : { token1: v.token1 }),
                ...(v.liquidity === undefined ? null : { liquidity: v.liquidity }),
                ...(v.volume === undefined ? null : { volume: v.volume }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.protocol === undefined ? null : { protocol: v.protocol }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.exchange === undefined ? null : { exchange: v.exchange }),
                ...(v.factory === undefined ? null : { factory: v.factory }),
            };
        });

    export type Outbound = {
        address?: string | undefined;
        token0?: MultiPairToken0$.Outbound | undefined;
        token1?: MultiPairToken1$.Outbound | undefined;
        liquidity?: number | undefined;
        volume?: number | undefined;
        price?: number | undefined;
        protocol?: string | undefined;
        blockchain?: string | undefined;
        exchange?: string | null | undefined;
        factory?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MultiPair> = z
        .object({
            address: z.string().optional(),
            token0: z.lazy(() => MultiPairToken0$.outboundSchema).optional(),
            token1: z.lazy(() => MultiPairToken1$.outboundSchema).optional(),
            liquidity: z.number().optional(),
            volume: z.number().optional(),
            price: z.number().optional(),
            protocol: z.string().optional(),
            blockchain: z.string().optional(),
            exchange: z.string().nullable().optional(),
            factory: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.token0 === undefined ? null : { token0: v.token0 }),
                ...(v.token1 === undefined ? null : { token1: v.token1 }),
                ...(v.liquidity === undefined ? null : { liquidity: v.liquidity }),
                ...(v.volume === undefined ? null : { volume: v.volume }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.protocol === undefined ? null : { protocol: v.protocol }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.exchange === undefined ? null : { exchange: v.exchange }),
                ...(v.factory === undefined ? null : { factory: v.factory }),
            };
        });
}
