/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Token0 = {
    address?: string | undefined;
    name?: string | undefined;
    price?: number | undefined;
    priceToken?: number | undefined;
};

export type Token1 = {
    address?: string | undefined;
    name?: string | undefined;
    price?: number | undefined;
    priceToken?: number | undefined;
};

export type Pair = {
    token0?: Token0 | undefined;
    token1?: Token1 | undefined;
};

/** @internal */
export namespace Token0$ {
    export type Inbound = {
        address?: string | undefined;
        name?: string | undefined;
        price?: number | undefined;
        priceToken?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Token0, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string().optional(),
            name: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
            };
        });

    export type Outbound = {
        address?: string | undefined;
        name?: string | undefined;
        price?: number | undefined;
        priceToken?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Token0> = z
        .object({
            address: z.string().optional(),
            name: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
            };
        });
}

/** @internal */
export namespace Token1$ {
    export type Inbound = {
        address?: string | undefined;
        name?: string | undefined;
        price?: number | undefined;
        priceToken?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Token1, z.ZodTypeDef, Inbound> = z
        .object({
            address: z.string().optional(),
            name: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
            };
        });

    export type Outbound = {
        address?: string | undefined;
        name?: string | undefined;
        price?: number | undefined;
        priceToken?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Token1> = z
        .object({
            address: z.string().optional(),
            name: z.string().optional(),
            price: z.number().optional(),
            priceToken: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.priceToken === undefined ? null : { priceToken: v.priceToken }),
            };
        });
}

/** @internal */
export namespace Pair$ {
    export type Inbound = {
        token0?: Token0$.Inbound | undefined;
        token1?: Token1$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<Pair, z.ZodTypeDef, Inbound> = z
        .object({
            token0: z.lazy(() => Token0$.inboundSchema).optional(),
            token1: z.lazy(() => Token1$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.token0 === undefined ? null : { token0: v.token0 }),
                ...(v.token1 === undefined ? null : { token1: v.token1 }),
            };
        });

    export type Outbound = {
        token0?: Token0$.Outbound | undefined;
        token1?: Token1$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Pair> = z
        .object({
            token0: z.lazy(() => Token0$.outboundSchema).optional(),
            token1: z.lazy(() => Token1$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.token0 === undefined ? null : { token0: v.token0 }),
                ...(v.token1 === undefined ? null : { token1: v.token1 }),
            };
        });
}
