/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type CryptoData = {
    /**
     * The blockchains on which the cryptocurrency exists
     */
    blockchains?: Array<string> | undefined;
    /**
     * The unique identifier of the cryptocurrency
     */
    id?: number | undefined;
    /**
     * The name of the cryptocurrency
     */
    name?: string | undefined;
    /**
     * The contracts associated with the cryptocurrency
     */
    contracts?: Array<string> | undefined;
    /**
     * The symbol of the cryptocurrency
     */
    symbol?: string | null | undefined;
};

/** @internal */
export namespace CryptoData$ {
    export type Inbound = {
        blockchains?: Array<string> | undefined;
        id?: number | undefined;
        name?: string | undefined;
        contracts?: Array<string> | undefined;
        symbol?: string | null | undefined;
    };

    export const inboundSchema: z.ZodType<CryptoData, z.ZodTypeDef, Inbound> = z
        .object({
            blockchains: z.array(z.string()).optional(),
            id: z.number().int().optional(),
            name: z.string().optional(),
            contracts: z.array(z.string()).optional(),
            symbol: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.contracts === undefined ? null : { contracts: v.contracts }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
            };
        });

    export type Outbound = {
        blockchains?: Array<string> | undefined;
        id?: number | undefined;
        name?: string | undefined;
        contracts?: Array<string> | undefined;
        symbol?: string | null | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CryptoData> = z
        .object({
            blockchains: z.array(z.string()).optional(),
            id: z.number().int().optional(),
            name: z.string().optional(),
            contracts: z.array(z.string()).optional(),
            symbol: z.string().nullable().optional(),
        })
        .transform((v) => {
            return {
                ...(v.blockchains === undefined ? null : { blockchains: v.blockchains }),
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.contracts === undefined ? null : { contracts: v.contracts }),
                ...(v.symbol === undefined ? null : { symbol: v.symbol }),
            };
        });
}
