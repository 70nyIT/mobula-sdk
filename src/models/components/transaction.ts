/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AssetTransaction, AssetTransaction$ } from "./assettransaction";
import { z } from "zod";

export type Transaction = {
    timestamp?: number | undefined;
    asset?: AssetTransaction | undefined;
    type?: string | undefined;
    methodId?: string | null | undefined;
    hash?: string | undefined;
    blockchain?: string | undefined;
    amount?: number | undefined;
    amountUsd?: number | undefined;
    to?: string | undefined;
    from?: string | undefined;
    txCost?: number | undefined;
};

/** @internal */
export namespace Transaction$ {
    export type Inbound = {
        timestamp?: number | undefined;
        asset?: AssetTransaction$.Inbound | undefined;
        type?: string | undefined;
        method_id?: string | null | undefined;
        hash?: string | undefined;
        blockchain?: string | undefined;
        amount?: number | undefined;
        amount_usd?: number | undefined;
        to?: string | undefined;
        from?: string | undefined;
        tx_cost?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Transaction, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            asset: AssetTransaction$.inboundSchema.optional(),
            type: z.string().optional(),
            method_id: z.string().nullable().optional(),
            hash: z.string().optional(),
            blockchain: z.string().optional(),
            amount: z.number().optional(),
            amount_usd: z.number().optional(),
            to: z.string().optional(),
            from: z.string().optional(),
            tx_cost: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.method_id === undefined ? null : { methodId: v.method_id }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.amount_usd === undefined ? null : { amountUsd: v.amount_usd }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.tx_cost === undefined ? null : { txCost: v.tx_cost }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        asset?: AssetTransaction$.Outbound | undefined;
        type?: string | undefined;
        method_id?: string | null | undefined;
        hash?: string | undefined;
        blockchain?: string | undefined;
        amount?: number | undefined;
        amount_usd?: number | undefined;
        to?: string | undefined;
        from?: string | undefined;
        tx_cost?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Transaction> = z
        .object({
            timestamp: z.number().int().optional(),
            asset: AssetTransaction$.outboundSchema.optional(),
            type: z.string().optional(),
            methodId: z.string().nullable().optional(),
            hash: z.string().optional(),
            blockchain: z.string().optional(),
            amount: z.number().optional(),
            amountUsd: z.number().optional(),
            to: z.string().optional(),
            from: z.string().optional(),
            txCost: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.asset === undefined ? null : { asset: v.asset }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.methodId === undefined ? null : { method_id: v.methodId }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.amountUsd === undefined ? null : { amount_usd: v.amountUsd }),
                ...(v.to === undefined ? null : { to: v.to }),
                ...(v.from === undefined ? null : { from: v.from }),
                ...(v.txCost === undefined ? null : { tx_cost: v.txCost }),
            };
        });
}
