/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type TradeHistoryResponseData = {
    date?: number | undefined;
    hash?: string | undefined;
    valueUsd?: number | undefined;
    tokenAmount?: number | undefined;
    tokenPrice?: number | undefined;
    type?: string | undefined;
    blockchain?: string | undefined;
};

export type TradeHistoryResponse = {
    data?: Array<TradeHistoryResponseData> | undefined;
};

/** @internal */
export namespace TradeHistoryResponseData$ {
    export type Inbound = {
        date?: number | undefined;
        hash?: string | undefined;
        value_usd?: number | undefined;
        token_amount?: number | undefined;
        token_price?: number | undefined;
        type?: string | undefined;
        blockchain?: string | undefined;
    };

    export const inboundSchema: z.ZodType<TradeHistoryResponseData, z.ZodTypeDef, Inbound> = z
        .object({
            date: z.number().int().optional(),
            hash: z.string().optional(),
            value_usd: z.number().optional(),
            token_amount: z.number().optional(),
            token_price: z.number().optional(),
            type: z.string().optional(),
            blockchain: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.value_usd === undefined ? null : { valueUsd: v.value_usd }),
                ...(v.token_amount === undefined ? null : { tokenAmount: v.token_amount }),
                ...(v.token_price === undefined ? null : { tokenPrice: v.token_price }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
            };
        });

    export type Outbound = {
        date?: number | undefined;
        hash?: string | undefined;
        value_usd?: number | undefined;
        token_amount?: number | undefined;
        token_price?: number | undefined;
        type?: string | undefined;
        blockchain?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TradeHistoryResponseData> = z
        .object({
            date: z.number().int().optional(),
            hash: z.string().optional(),
            valueUsd: z.number().optional(),
            tokenAmount: z.number().optional(),
            tokenPrice: z.number().optional(),
            type: z.string().optional(),
            blockchain: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.valueUsd === undefined ? null : { value_usd: v.valueUsd }),
                ...(v.tokenAmount === undefined ? null : { token_amount: v.tokenAmount }),
                ...(v.tokenPrice === undefined ? null : { token_price: v.tokenPrice }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.blockchain === undefined ? null : { blockchain: v.blockchain }),
            };
        });
}

/** @internal */
export namespace TradeHistoryResponse$ {
    export type Inbound = {
        data?: Array<TradeHistoryResponseData$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<TradeHistoryResponse, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.array(z.lazy(() => TradeHistoryResponseData$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Array<TradeHistoryResponseData$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, TradeHistoryResponse> = z
        .object({
            data: z.array(z.lazy(() => TradeHistoryResponseData$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}
