/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type MultiDataResponse = {
    data?: Record<string, Record<string, any>> | undefined;
};

/** @internal */
export namespace MultiDataResponse$ {
    export type Inbound = {
        data?: Record<string, Record<string, any>> | undefined;
    };

    export const inboundSchema: z.ZodType<MultiDataResponse, z.ZodTypeDef, Inbound> = z
        .object({
            data: z.record(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });

    export type Outbound = {
        data?: Record<string, Record<string, any>> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, MultiDataResponse> = z
        .object({
            data: z.record(z.record(z.any())).optional(),
        })
        .transform((v) => {
            return {
                ...(v.data === undefined ? null : { data: v.data }),
            };
        });
}
